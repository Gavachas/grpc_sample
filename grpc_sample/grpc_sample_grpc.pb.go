// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: grpc_sample/grpc_sample.proto

package grpc_sample

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ItilServiceClient is the client API for ItilService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItilServiceClient interface {
	AddIncident(ctx context.Context, in *AddIncidentRequest, opts ...grpc.CallOption) (*AddIncidentResponse, error)
	GetIncident(ctx context.Context, in *GetIncidentRequest, opts ...grpc.CallOption) (*GetIncidentResponse, error)
	GetUserRegion(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserRegionResponse, error)
}

type itilServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewItilServiceClient(cc grpc.ClientConnInterface) ItilServiceClient {
	return &itilServiceClient{cc}
}

func (c *itilServiceClient) AddIncident(ctx context.Context, in *AddIncidentRequest, opts ...grpc.CallOption) (*AddIncidentResponse, error) {
	out := new(AddIncidentResponse)
	err := c.cc.Invoke(ctx, "/grpc_sample.ItilService/AddIncident", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itilServiceClient) GetIncident(ctx context.Context, in *GetIncidentRequest, opts ...grpc.CallOption) (*GetIncidentResponse, error) {
	out := new(GetIncidentResponse)
	err := c.cc.Invoke(ctx, "/grpc_sample.ItilService/GetIncident", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itilServiceClient) GetUserRegion(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserRegionResponse, error) {
	out := new(GetUserRegionResponse)
	err := c.cc.Invoke(ctx, "/grpc_sample.ItilService/GetUserRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItilServiceServer is the server API for ItilService service.
// All implementations must embed UnimplementedItilServiceServer
// for forward compatibility
type ItilServiceServer interface {
	AddIncident(context.Context, *AddIncidentRequest) (*AddIncidentResponse, error)
	GetIncident(context.Context, *GetIncidentRequest) (*GetIncidentResponse, error)
	GetUserRegion(context.Context, *GetUserRequest) (*GetUserRegionResponse, error)
	mustEmbedUnimplementedItilServiceServer()
}

// UnimplementedItilServiceServer must be embedded to have forward compatible implementations.
type UnimplementedItilServiceServer struct {
}

func (UnimplementedItilServiceServer) AddIncident(context.Context, *AddIncidentRequest) (*AddIncidentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIncident not implemented")
}
func (UnimplementedItilServiceServer) GetIncident(context.Context, *GetIncidentRequest) (*GetIncidentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncident not implemented")
}
func (UnimplementedItilServiceServer) GetUserRegion(context.Context, *GetUserRequest) (*GetUserRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRegion not implemented")
}
func (UnimplementedItilServiceServer) mustEmbedUnimplementedItilServiceServer() {}

// UnsafeItilServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItilServiceServer will
// result in compilation errors.
type UnsafeItilServiceServer interface {
	mustEmbedUnimplementedItilServiceServer()
}

func RegisterItilServiceServer(s grpc.ServiceRegistrar, srv ItilServiceServer) {
	s.RegisterService(&ItilService_ServiceDesc, srv)
}

func _ItilService_AddIncident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIncidentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItilServiceServer).AddIncident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_sample.ItilService/AddIncident",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItilServiceServer).AddIncident(ctx, req.(*AddIncidentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItilService_GetIncident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIncidentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItilServiceServer).GetIncident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_sample.ItilService/GetIncident",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItilServiceServer).GetIncident(ctx, req.(*GetIncidentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItilService_GetUserRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItilServiceServer).GetUserRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_sample.ItilService/GetUserRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItilServiceServer).GetUserRegion(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ItilService_ServiceDesc is the grpc.ServiceDesc for ItilService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItilService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_sample.ItilService",
	HandlerType: (*ItilServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddIncident",
			Handler:    _ItilService_AddIncident_Handler,
		},
		{
			MethodName: "GetIncident",
			Handler:    _ItilService_GetIncident_Handler,
		},
		{
			MethodName: "GetUserRegion",
			Handler:    _ItilService_GetUserRegion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_sample/grpc_sample.proto",
}
